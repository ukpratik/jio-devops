replicaCount: 5

hpa:
  minReplicas: 5
  maxReplicas: 10
  cpu: 160
  memory: 160

image:
  repository: nexuscoe.rjil.ril.com:5115/jioent/health/base-event-publisher-platform #nginx
  tag: prod-latest #stable
  pullPolicy: Always #IfNotPresent
  customTCPPort: 5000
  env:
    - name: RUN_ENV
      value: PROD
    - name: LOGGING_LEVEL
      value: WARN
    - name: DEBUG
      value: "False"
    - name: PUBLISHER_CONFIG_FILE
      value: "configs/uaas_publisher_config.json"


imagePullSecrets: #[]
  - name: nexus-container-repo
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 5000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 256Mi

nodeSelector: {}

tolerations: []

affinity: {}

# dockerImageCredentials:
#   registry: guruartifacts.azurecr.io
#   username: guruartifacts
#   password: zo8sAObBAq/Q9iEMa+TAR42=Ly8yYytp

app:
  envVars:
    LOG_LEVEL: info
    # TMPFS_LOCATION: /tmp/app-server
    # CASE_LAKE_HOST: localhost
    # CASE_LAKE_PORT: 8080
    # CASE_LAKE_CONFIG_FILE: configs/case_lake_config.json

  configFiles:
    - fileName: uaas_publisher_config.json
      data: |-
        {
            "logger_name": "uaas_event_publisher_platform_logger",
            "event_queue_config": {
                "admin": {
                    "queue_type": "KAFKA",
                    "topic": "uaas-topic",
                    "admin": {
                        "kafka": {
                            "bootstrap_servers": [
                                "10.161.38.16:6667",
                                "10.161.38.17:6667",
                                "10.161.38.18:6667"
                            ],
                            "partitions": 15,
                            "replication_fator": 3,
                            "config": {
                                "cleanup.policy": "delete",
                                "retention.ms": "18000000",
                                "max.message.bytes": "50000",
                                "min.insync.replicas": "2"
                            }
                        }
                    }
                },
                "producer": {
                    "queue_type": "KAFKA",
                    "topic": "uaas-topic",
                    "producer": {
                        "kafka": {
                            "bootstrap_servers": [
                                "10.161.38.16:6667",
                                "10.161.38.17:6667",
                                "10.161.38.18:6667"
                            ],
                            "config": {
                                "acks": "all",
                                "partitioner": "murmur2_random",
                                "enable.idempotence": "true",
                                "max.in.flight.requests.per.connection": "1"
                            }
                        }
                    }
                }
            },
            "event_definition": "UaasEvent",
            "event_transformers": [
                {
                    "function": "add_request_meta"
                },
                {
                    "function": "add_event_id_if_missing"
                },
                {
                    "function": "add_ts_if_missing"
                }
            ]
        }
  configFilesMountPath: /usr/src/app/src/configs
